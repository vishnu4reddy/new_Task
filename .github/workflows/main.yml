name: Rebase PR with Main on Push

on:
  push:
    branches:
      - main  
permissions:
  contents: write
  pull-requests: read
jobs:
  rebase-with-main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:  
          token: ${{  secrets.GITHUB_TOKEN  }} 

      - name: Set up Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com
      
      - name: Fetch latest main branch
        run: |
          git fetch origin main
      # Get list of open PRs
      - name: Get list of open PRs
        id: pr_list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          prs=$(gh pr list --state open --json number,headRefName --jq '.[] | "\(.number) \(.headRefName)"')
          echo "::set-output name=prs::$prs"
          echo "$prs"

      - name: Rebase remaining PRs onto main branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prs=$(gh pr list --state open --json number,headRefName)
      
          # Loop through each open PR and rebase
          echo "$prs" | jq -c '.[]' | while IFS= read -r pr; do
            pr_number=$(echo "$pr" | jq -r '.number')
            pr_branch=$(echo "$pr" | jq -r '.headRefName')
      
            if [ -z "$pr_branch" ]; then
              echo "::error::Skipping PR #$pr_number because branch name is empty."
              continue
            fi
      
            echo "Rebasing PR #$pr_number ($pr_branch) onto main branch..."
      
            # Fetch the latest main branch and the PR branch
            git fetch origin
      
            # Checkout the main branch and pull the latest changes
            git checkout main
            git pull origin main
      
            # Checkout the PR branch and pull the latest changes from the PR branch
            git checkout "$pr_branch"
            git pull origin "$pr_branch"
      
            # Ensure there are no uncommitted changes before rebasing
            if [ -n "$(git status --porcelain)" ]; then
              echo "::error::There are uncommitted changes in PR #$pr_number ($pr_branch). Please commit or stash them before proceeding."
              continue
            fi
            # Start the rebase process
            echo "Starting rebase of PR #$pr_number..."
      
            # Rebase the PR branch onto the main branch
            # git rebase origin/main || {
            #   echo "::error::Rebase failed for PR #$pr_number. Trying to skip conflicting commits."
      
            #   git rebase --strategy=recursive --strategy-option=ours origin/main || echo "Automatic rebase failed. Conflicts need manual resolution."
                 
            #   git add .
            #   git rebase --continue
            # }
            echo "::error::Rebase failed for PR #$pr_number. Trying to skip conflicting commits."
      
            git rebase --strategy=recursive --strategy-option=ours origin/main || echo "Automatic rebase failed. Conflicts need manual resolution."
            git add .
            git rebase --continue
            # After the rebase is successful, push the rebased PR
            echo "Rebasing of PR #$pr_number ($pr_branch) successful!"
            
            git push origin "$pr_branch" --force-with-lease
            echo "Successfully pushed rebased PR #$pr_number ($pr_branch)."
      
          done
